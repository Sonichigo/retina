// Code generated by MockGen. DO NOT EDIT.
// Source: decoder.go

// Package mocks is a generated GoMock package.
package mocks

import (
	netip "net/netip"
	reflect "reflect"

	flow "github.com/cilium/cilium/api/v1/flow"
	gomock "github.com/golang/mock/gomock"
)

// MockEpDecoder is a mock of EpDecoder interface.
type MockEpDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockEpDecoderMockRecorder
}

// MockEpDecoderMockRecorder is the mock recorder for MockEpDecoder.
type MockEpDecoderMockRecorder struct {
	mock *MockEpDecoder
}

// NewMockEpDecoder creates a new mock instance.
func NewMockEpDecoder(ctrl *gomock.Controller) *MockEpDecoder {
	mock := &MockEpDecoder{ctrl: ctrl}
	mock.recorder = &MockEpDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpDecoder) EXPECT() *MockEpDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockEpDecoder) Decode(ip netip.Addr) *flow.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", ip)
	ret0, _ := ret[0].(*flow.Endpoint)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockEpDecoderMockRecorder) Decode(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockEpDecoder)(nil).Decode), ip)
}

// IsEndpointOnLocalHost mocks base method.
func (m *MockEpDecoder) IsEndpointOnLocalHost(ip string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEndpointOnLocalHost", ip)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEndpointOnLocalHost indicates an expected call of IsEndpointOnLocalHost.
func (mr *MockEpDecoderMockRecorder) IsEndpointOnLocalHost(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEndpointOnLocalHost", reflect.TypeOf((*MockEpDecoder)(nil).IsEndpointOnLocalHost), ip)
}

// MockSvcDecoder is a mock of SvcDecoder interface.
type MockSvcDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockSvcDecoderMockRecorder
}

// MockSvcDecoderMockRecorder is the mock recorder for MockSvcDecoder.
type MockSvcDecoderMockRecorder struct {
	mock *MockSvcDecoder
}

// NewMockSvcDecoder creates a new mock instance.
func NewMockSvcDecoder(ctrl *gomock.Controller) *MockSvcDecoder {
	mock := &MockSvcDecoder{ctrl: ctrl}
	mock.recorder = &MockSvcDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSvcDecoder) EXPECT() *MockSvcDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockSvcDecoder) Decode(ip netip.Addr) *flow.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", ip)
	ret0, _ := ret[0].(*flow.Service)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockSvcDecoderMockRecorder) Decode(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSvcDecoder)(nil).Decode), ip)
}
